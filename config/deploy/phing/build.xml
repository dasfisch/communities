<?xml version="1.0" encoding="UTF-8"?>

<project name="Communities" default="input">
	
	<property name="repo" value="git@github.com:dasfisch/communities.git" />
	<property name="host" value="" override="true"/>
	<property name="password" value="" override="true" />
	<property name="username" value="stateadm" />
	<property name="branch" value="master" override="true" />
	

	<property name="hosts" value="dev,int,qa" />
	
	<property name="and" value="&amp;&amp;" />
	
	<property name="git.submoduleInit" value="git submodule init" />
	<property name="git.submoduleUpdate" value="git submodule update" />	
	
	<property name="dir.deployRoot" value="/tmp/phing-deploy" />
	<property name="dir.localRepo" value="${dir.deployRoot}/communities/" />
	<property name="dir.localAssets" value="${dir.localRepo}/wordpress/wp-content/themes/Eris/assets" />
	<property name="dir.js" value="${dir.localAssets}/js/" />
	<property name="dir.css" value="${dir.localAssets}/css/" />
	<property name="dir.git" value=".git" />
	
	<property name="dir.remoteBuildRoot" value="~/communities/phing" />
	<property name="dir.remoteBuildDir" value="${dir.remoteBuildRoot}/build" />
	<property name="dir.remoteWebRoot" value="/appl/communities/www/" />
	
	<property name="file.excluded" value="sync.exclude" />
	<property name="file.properties" value="properties" />
	
	
	<!-- Default: collect user input and run targets -->
	<target name="input">
		
		<input propertyName="env"  message="Which environment would you like to deploy to?" validargs="${hosts}" />
		
		<input propertyName="branch"  message="Which branch would you like to deploy?" />
		
		<!-- Which server are we deploying to? -->
		
		<!-- DEV -->
		<if>
			<equals arg1="${env}" arg2="dev" />
		<then>
			<property name="host" value="uxdev" override="true" />
		</then>
		
		</if>
		
		<!-- INT -->
		<if>
			<equals arg1="${env}" arg2="int" />
		<then>
			<property name="host" value="uxint" override="true" />
		</then>
		
		</if>
		
		<!-- QA -->
		<if>
			<equals arg1="${env}" arg2="qa" />
		<then>
			<property name="host" value="comapp401p.qa.ch4.s.com" override="true" />
		</then>
		
		</if>
		
		<input propertyName="password" message="Enter password for ${username}@${host}:" />
		
		
		<!-- Does the local repo dir we deploy from exist? if not, create it -->
		<phingcall target="repoDir" />
		
		<!-- Is the local repo dir a git repo? if not, clone repo -->
		<phingcall target="gitCheck" />
		
		<!-- Checkout branch and submodule update -->
		<phingcall target="checkoutBranch" />
		
		<phingcall target="minimizeAssets" />
		
		<phingcall target="remoteCheckBuildDir">
			<property name="host" value="${host}" />
		</phingcall>
		
		<phingcall target="syncToRemote" />
		
		
	</target>
	
	
	<target name="repoDir">
	
		<available file="${dir.localRepo}" type="dir" property="dir_exists" />
		
		<if>
			<not> 
				<isset property="dir_exists" /> 
			</not>
			<then>
				<!-- Create dir -->
				<mkdir dir="${dir.localRepo}" />
			</then>
			
		</if>

	</target>
	
	<target name="gitCheck">
		
		<available file="${dir.localRepo}/${dir.git}" type="dir" property="git_dir_exists" />
		
		<!-- If the repo dir is not a repo, clone the repo into it -->
		<if>
			<not>
				<isset property="git_dir_exists" />
			</not>
			<then>
				<echo msg="Initializing repo..." />
				
				<!-- Clone repo -->
				<gitclone repository="${repo}"
							targetPath="${dir.localRepo}" />
				
				<echo msg="Initializing and updating submodules..." />
				<exec command="cd ${dir.localRepo} ${and} ${git.submoduleInit} ${and} ${git.submoduleUpdate}" />
				
			</then>
		
		</if>
	</target>	
	
	<target name="checkoutBranch">
	
		<echo msg="Checking out ${branch} and updating submodules..." />
		
		<!-- Checkout branch -->
		<gitcheckout repository="${dir.localRepo}"
					branchname="${branch}"
					force="true" />
			
		<!-- Submodule Init and Update -->			
		<exec command="cd ${dir.localRepo} ${and} ${git.submoduleInit} ${and} ${git.submoduleUpdate}" />
		
	</target>
	
	<target name="minimizeAssets">
	
		<reflexive>
		    <fileset dir="${dir.js}">
		        <include pattern="*.js" />
		    </fileset>
		    <filterchain>
		        <striplinebreaks />
		        <stripwhitespace />
		    </filterchain>
		</reflexive>
		
		<reflexive>
		    <fileset dir="${dir.css}">
		        <include pattern="*.css" />
		    </fileset>
		    <filterchain>
		        <striplinebreaks />
		        <stripwhitespace />
		    </filterchain>
		</reflexive>
	
	</target>
	
	<target name="remoteCheckBuildDir">
		
		<ssh username="${username}" password="${password}" host="${host}" command="mkdir -p ${dir.remoteBuildDir}" failonerror="true" />
		
	</target>
	
	<target name="syncToRemote">
	
		<sync sourcedir="${dir.localRepo}"
			    destinationdir="${username}@${host}:${dir.remoteBuildDir}"
			    excludefile="${file.excluded}"
			    verbose="true" /> 
	
	
	</target>
	
</project>