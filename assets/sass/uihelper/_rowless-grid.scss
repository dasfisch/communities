
// Used by rowless-grid-with-css2
$rowless-grid-max-cells: 20;
$rowless-grid-strategy: "css3";

@mixin rowless-grid($cell-selector, $grid-columns, $total-width, $margin: 0, $padding: 0, $max-cells: $rowless-grid-max-cells, $strategy: $rowless-grid-strategy) {
  @if $strategy == 'css3' {
    @include rowless-grid-with-css3($cell-selector, $grid-columns, $total-width, $margin, $padding);
  } @else if $strategy == 'css2' {
    @include rowless-grid-with-css2($cell-selector, $grid-columns, $total-width, $margin, $padding, $max-cells);
  } @else {
    @warn "Unknown rowless-grid strategy: #{$strategy}!";
  }
}

@mixin rowless-grid-with-css3($cell-selector, $grid-columns, $total-width, $margin: 0, $padding: 0) {
  $widths: ratioize(add-spacing(repeat-into-list($total-width / $grid-columns, $grid-columns), $padding, $margin), 100%, $grid-columns);
  @for $i from 0 through $grid-columns - 1 {
    #{$cell-selector}:nth-child(#{$grid-columns}n+#{$i}) {
      float:left;
      width: nth($widths, $i + 1);
      @if ($padding > 0) {
        padding: nth($widths, ($grid-columns + 1));
      }
      @if $i == 1 {
        clear: both;
      } @else {
        margin-left: nth($widths, length($widths));
      }
    }
  }
  // Create a top margin for all rows after the first
  #{$cell-selector}:not(:nth-child(-n+#{$grid-columns})) {
    margin-top: nth($widths, length($widths));
  }
}

@mixin rowless-grid-with-css2($cell-selector, $grid-columns, $total-width, $margin: 0, $padding: 0, $max-cells: $rowless-grid-max-cells) {
  $widths: ratioize(add-spacing(repeat-into-list($total-width / $grid-columns, $grid-columns), $padding, $margin), 100%, 1);
  #{$cell-selector} {
    margin-left: nth($widths, length($widths));
    float:left;
    width: nth($widths, $grid-columns); 
    @if ($padding > 0) {
      padding: nth($widths, ($grid-columns + 1));
    }
  }

  #{repeat-concat("#{$cell-selector}", " + #{$cell-selector}", $grid-columns)} {
    margin-top: nth($widths, length($widths));
  }

  $base-selector: "#{$cell-selector}:first-child";
  $next-selector: repeat-concat("", " + #{$cell-selector}", $grid-columns);
 
  // Create a top margin for all rows after the first
  @for $i from 0 through ceil(($max-cells / $grid-columns) - 1) {
    #{repeat-concat($base-selector, $next-selector, $i)} {
      margin-left: 0;
      clear: both;
      width: nth($widths, 1); 
    }
  }
}
