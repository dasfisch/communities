

// Turn a list of numbers into relative percentages summing to $total-pct;
// $remainder-idx will pad remainder to nth value, or the last element if $remainder-idx is 0
// Example 1: ratioize((10, 10, 10))  => (33.333%, 33.333%, 33.334%)
// Example 1: ratioize((10, 10, 10), 100%, 2)  => (33.333%, 33.334%, 33.333%)
// Example 2: ratioize((10, 10, 10), 99%)  => (33%, 33%, 33%)
@function ratioize($num-list, $total-pct: 100%, $remainder-idx: 0) {
  $sum: sum($num-list);
  $pctages: ();
  @for $i from 1 through length($num-list) {
    $pctages: join($pctages, to-decimal-places(percentage(nth($num-list, $i) / $sum), 3));
  }
  $remainder: $total-pct - sum($pctages);
  $remainder-idx: if($remainder-idx == 0, length($num-list), $remainder-idx);
  $return-pctages: ();
  // Add remainder to the index $remainder-idx:
  @for $i from 1 through length($num-list) {
    $return-pctages: join($return-pctages, (nth($pctages, $i) + if($i == $remainder-idx, $remainder, 0)));
  }
  @return $return-pctages;
}


@function to-decimal-places($base-number, $digits: 2) {
  @return floor($base-number * power(10, $digits)) / power(10, $digits);
}

@function power($num, $exponent) {
  $val: 1;
  @for $i from 1 through $exponent {
    $val: $val * $num;
  }
  @return $val;
}


@function sum($num-list) {
  $sum: 0;
  @each $v in $num-list {
    $sum: $sum + $v
  }
  @return $sum;
}

@function multiply($num-list) {
  $val: 1;
  @each $v in $num-list {
    $val: $val * $v;
  }
  @return $val;
}

@function divide($num-list) {
  $val: nth($num-list, 1);
  @for $i from 2 through length($num-list) {
    $val: $val / nth($num-list, $i);
  }
  @return $val;
}

@function subtract($num-list) {
  $val: nth($num-list, 1);
  @for $i from 2 through length($num-list) {
    $val: $val - nth($num-list, $i);
  }
  @return $val;
}