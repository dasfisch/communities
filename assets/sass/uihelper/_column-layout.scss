
$column-layout-strategy: "css2";

@mixin col-layout($column-widths, $margin: 0, $padding: false, $total-width: 100%, $float: "left", $strategy: 'css2') {
  @if $strategy == 'css3' {
    @include col-layout-with-css3($column-widths, $margin, $padding, $total-width, $float);
  } @else {
    @include col-layout-with-css2($column-widths, $margin, $padding, $total-width, $float);
  }
}

@mixin col-layout-with-css2($column-widths, $margin: 0, $padding: false, $total-width: 100%, $float: "left") {
  $use-padding: true;
  @if ( $padding == false ) {
    $padding: 0;
    $use-padding: false;
  }
  $base-selector: "> *";
  $incremental-selector: " + *";
  $column-cnt: length($column-widths);
  $all-columns: add-spacing($column-widths, $padding, $margin);
  $width-percentages: ratioize($all-columns, $total-width, length($column-widths));
  
  @for $i from 1 through $column-cnt {
    $next-padding: nth($width-percentages, $column-cnt + ($i * 2));
    #{repeat-concat($base-selector, $incremental-selector, $i - 1)} {
      width: nth($width-percentages, $i);
      float: #{$float};
      @if $use-padding {
        padding: $next-padding;
      }
      @if ($i > 1) and ($margin > 0) {
        margin-#{$float}: nth($width-percentages, length($width-percentages));
      }
    }
  }
}

@mixin col-layout-with-css3($column-widths, $margin: 0, $padding: false, $total-width: 100%, $float: "left") {
  $use-padding: true;
  @if ( $padding == false ) {
    $padding: 0;
    $use-padding: false;
  }
  
  $column-cnt: length($column-widths);
  
  $padded-column-widths: add-spacing($column-widths, $padding, $margin);
  $width-percentages: ratioize($padded-column-widths, $total-width, length($column-widths));
  
  @for $i from 1 through $column-cnt {
    $next-padding: nth($width-percentages, $column-cnt + ($i * 2));
    > :nth-child(#{$i}) {
      width: nth($width-percentages, $i);
      float: #{$left};
      @if $use-padding {
        padding: $next-padding;
      }
      @if ($i > 1) and ($margin > 0) {
        margin-#{$float}: nth($width-percentages, length($width-percentages));
      }
    }
  }
}
